\input texinfo  @c -*-texinfo-*-
@settitle Libre@ Blackjack
@documentencoding UTF-8

@setfilename blackjack.info
@set UPDATED 2025-09-29
@set VERSION 

@copying
This manual is for LibreBlackjack (version @value{VERSION}, @value{UPDATED}),
which is a completely free-as-in-freedom blackjack engine designed to
study and analyze the game statistics using different playing
strategies, ranging from simple card counting up to other complex
algorithms based on artificial-intelligence techniques.

Copyright @copyright{} 2016-2025 Jeremy Theler.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title Libre@ Blackjack
@author Jeremy Theler
2025-09-29
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Libre@ Blackjack

@menu
* Overview::
* Running blackjack::
* Playing blackjack::
* Configuration::
* Internal players::
* Examples::
* Communication mechanisms::
* Tests::
* Statistical utilities::
* Installation::
@end menu

@node Overview
@chapter Overview
@anchor{#overview}
@itemize
@item
Explain what the goal is.
@item
Show some examples.
@item
One directory (a.k.a. folder)
@item
1/2 Mhands/second
@item
Both free and open source so you get the four freedoms
@enumerate 0
@item
run
@item
study
@item
change
@item
re-distribute
@end enumerate

@end itemize

@menu
* Why::
* How::
* What::
@end menu

@node Why
@section Why
@anchor{#why}
Since blackjack is not straightforward to analyze with analytical
statistics equations, a monte-carlo-based approach is needed.

@node How
@section How
@anchor{#how}
@itemize
@item
FOSS
@item
unix
@end itemize

@node What
@section What
@anchor{#what}
a dealer (he) that knows how to deal blackjack, tells the player (her)
what cards are dealt, asks the player for her choices (bet, hit, stand,
etc.) and keeps track of the results so as to write a report with ev,
sd, etc.

@node Running blackjack
@chapter Running @code{blackjack}
@anchor{#running-blackjack}

@menu
* Invocation::
* Results::
* Interactive game::
@end menu

@node Invocation
@section Invocation
@anchor{#sec:invocation}
The @code{blackjack} program executable follows the POSIX standard. Its
usage is:

@verbatim
blackjack [-c path_to_conf_file] [options] 
@end verbatim

@table @asis
@item @code{-c<}@emph{path}@code{>} or @code{--conf=}@emph{path}

Specify the path to the configuration file. Default is
@code{./blackjack.conf}.

@item @code{-n<}@math{n}@code{>} or @code{--hands=}@math{n}

Specify the number of hands to play. Corresponds to the @code{hands}
variable in the configuration file.

@item @code{-d<}@math{n}@code{>} or @code{--decks=}@math{n}

Specify the number of decks to use in the shoe. Corresponds to the
@code{decks} variable in the configuration file.

@item @code{-f} or @code{--flatbet}

Do not ask for the amount to bet before starting a new hand and use a
flat unit bet. Corresponds to the @code{flat_bet} variable in the
configuration file.

@item @code{-i} or @code{--internal}

Use the internal player to play against the dealer. See the manual for
details and instructions to define the rules and optionally, the playing
strategy and/or arranged shoes.

@item @code{-h} or @code{--help}

Print this informative help message into standard output and exit
successfully.

@item @code{-v} or @code{--version}

Print the version number and licensing information into standard output
and then exit successfully.

@item @code{--}@emph{configuration_variable}@code{[=}@emph{value}@code{]}

Any configuration variable from the configuration file can be set from
the command line. For example, passing @code{--no_insurance} is like
setting @code{no_insurance = 1} in the configuration file. Command-line
options override setting in the configuration file.

@end table

If no configuration file is given, a file named @code{blackjack.conf} in
the current directory is used, provided it exists.

See the full documentation for the available options and the default
values.

Sec.@ 4 contains the details about the settings which can be used in the
configuration file. As already stated, the options which can be given in
the configuration file (explained in sec.@ 4) can be passed as a
command-line argument following the POSIX double-dash format
@code{--variable=value}. For example, running

@verbatim
blackjack --decks=4 --no_insurance=true
@end verbatim

is equivalent to using a configuration file with

@verbatim
decks = 4
no_insurance = true
@end verbatim

Proper quotation migh be needed if the value contains spaces. For
example,

@verbatim
blackjack --internal --cards="TH JS 6D"
@end verbatim

With no command-line options and no configuration file, @code{blackjack}
starts in interactive mode and it is ready to start a blackjack game
(see sec.@ 2.3 for details).

@node Results
@section Results
@anchor{#sec:results}
TBD

In YAML

@code{yq}

@node Interactive game
@section Interactive game
@anchor{#sec:interactive}
TBD

If @code{blackjack} is attached to an interactive TTY (i.e.@ neither the
standard input nor outputs are redirected) and there is no @code{player}
option in the configuration file, an interactive game is triggered.
First thing the program will do is to ask for a bet:

@verbatim
xxxxx
@end verbatim

So the user should enter a number, say ``1'' and then press Enter and
then a game will be dealt:

@verbatim
xxxxx
@end verbatim

A flat-betting game can be played by passing @code{--flat_bet=true} (or
@code{--flat_bet=2} to bet two units each hand) through the command
line:

@verbatim
$ blackjack --flat_bet=true
xxxxx
@end verbatim

The user can quit by either typing @code{quit} (or @code{q}) or hitting
Ctrl-D. Write @code{help} or see sec.@ 3.2 for a description of all the
possible commands the player can give to the dealer.

@node Playing blackjack
@chapter Playing blackjack
@anchor{#sec:playing}
@quotation
I overhear a lot of bad gambling advice in the casinos. Perhaps the most
frequent is this one, ``The object of blackjack is to get as close to 21
as possible, without going over.'' No! The object of blackjack is to
beat the dealer. To beat the dealer the player must first not bust (go
over 21) and second either outscore the dealer or have the dealer bust.

The Wizard of Odds,
@url{https://wizardofodds.com/games/blackjack/basics/#rules}
@end quotation
Here are the basic Blackjack rules:

@enumerate 
@item
Blackjack may be played with one to eight decks of 52-card decks.

@item
Aces may be counted as 1 or 11 points, 2 to 9 according to pip value,
and tens and face cards count as ten points.

@item
The value of a hand is the sum of the point values of the individual
cards. Except, a ``blackjack'' is the highest hand, consisting of an ace
and any 10-point card, and it outranks all other 21-point hands.

@item
After the players have bet, the dealer will give two cards to each
player and two cards to himself. One of the dealer cards is dealt face
up. The facedown card is called the ``hole card.''

@item
If the dealer has an ace showing, he will offer a side bet called
``insurance.'' This side wager pays 2 to 1 if the dealer's hole card is
any 10-point card. Insurance wagers are optional and may not exceed half
the original wager.

@item
If the dealer has a ten or an ace showing (after offering insurance with
an ace showing), then he will peek at his facedown card to see if he has
a blackjack. If he does, then he will turn it over immediately.

@item
If the dealer does have a blackjack, then all wagers (except insurance)
will lose, unless the player also has a blackjack, which will result in
a push. The dealer will resolve insurance wagers at this time.

@item
Play begins with the player to the dealer's left. The following are the
choices available to the player:

@table @asis
@item Stand

Player stands pat with his cards.

@item Hit

Player draws another card (and more if he wishes). If this card causes
the player's total points to exceed 21 (known as ``breaking'' or
``busting'') then he loses.

@item Double

Player doubles his bet and gets one, and only one, more card.

@item Split

If the player has a pair, or any two 10-point cards, then he may double
his bet and separate his cards into two individual hands. The dealer
will automatically give each card a second card. Then, the player may
hit, stand, or double normally. However, when splitting aces, each ace
gets only one card. Sometimes doubling after splitting is not allowed.
If the player gets a ten and ace after splitting, then it counts as 21
points, not a blackjack. Usually the player may keep re-splitting up to
a total of four hands. Sometimes re-splitting aces is not allowed.

@item Surrender

The player forfeits half his wager, keeping the other half, and does not
play out his hand. This option is only available on the initial two
cards, and depending on casino rules, sometimes it is not allowed at
all.

@end table

@item
After each player has had his turn, the dealer will turn over his hole
card. If the dealer has 16 or less, then he will draw another card. A
special situation is when the dealer has an ace and any number of cards
totaling six points (known as a ``soft 17''). At some tables, the dealer
will also hit a soft 17.

@item
If the dealer goes over 21 points, then any player who didn't already
bust will win.

@item
If the dealer does not bust, then the higher point total between the
player and dealer will win.

@item
Winning wagers pay even money, except a winning player blackjack usually
pays 3 to 2. Some casinos have been short-paying blackjacks, which is a
rule strongly in the casino's favor.

@end enumerate

To perform monte-carlo simulations, in Libre@ Blackjack the dealer (he)
and the player (she) can ``talk'' through commands which are ASCII
strings sent through an inter-process communcation (IPC) mechanism. In
the most basic case, an automated player reads messages from the dealer
from @code{blackjack}'s standard output and writes her ASCII commands
into the dealer's standard input.

@menu
* Messages from the dealer to the player::
* Commands from the player to the dealer::
@end menu

@node Messages from the dealer to the player
@section Messages from the dealer to the player
@anchor{#sec:d2p}
@itemize
@item
Messages are ASCII-formatted string composed of tokens separated by
spaces.
@item
Each message starts with a single token which is either a single English
word (e.g.@ @code{bet} or @code{play}) or more than one English words
concatenated using a low hyphen @code{_} (e.g.@ @code{new_hand} or
@code{player_card}). That is to say, the first token of the message is a
single-token string.
@item
The first token might or might not end with a question mark @code{?}
(e.g.@ @code{card_player 4H} or @code{play? 18 4}):
@itemize
@item
Messages with tokens that do not end in a question mark @code{?} are
informative and do not need any response from the player.
@item
Interrogative messages strating with tokens than end in a question mark
@code{?} need to be answered by the player. That is to say, after
issuing a message as a question the dealer starts listening to the
proper communication channel (see sec.@ 7) for a valid command from the
dealer (detailed in sec.@ 3.2).
@end itemize

@item
A message might have extra tokens that convey information to the player,
e.g.@ @code{new_hand 15141 -4587.5}, @code{card_player 9S},
@code{play? 16 10}.
@item
All numerical values such as hand totals or bankrolls are given as
decimal ASCII strings.
@end itemize

@menu
* Interrogative messages::
* Informative messages::
@end menu

@node Interrogative messages
@subsection Interrogative messages
@anchor{#sec:interrogative}
These messages have to answered by the user. If an invalid answer is
received, an informative message (sec.@ 3.1.2) with a complain will be
sent and then the same interrogative message will be re-sent.

@itemize
@item
@code{bet?} (sec.@ 3.1.1.1)
@item
@code{insurance?} (sec.@ 3.1.1.2)
@item
@code{play?} (sec.@ 3.1.1.3)
@end itemize

@menu
* bet?::
* insurance?::
* play? p d::
@end menu

@node bet?
@subsubsection @code{bet?}
@anchor{#sec:bet}
The dealer asks the user the amount to wage in the hand that is about to
start. The player should send a positive integer in response. first hand
has an id equal to one so @math{k>1} when splitting).

@strong{Examples}

@verbatim
bet?
@end verbatim

@node insurance?
@subsubsection @code{insurance?}
@anchor{#sec:insurance}
The dealer asks the user if she wants to insure her hand when the
dealer's upcards is an ace. This message is only sent if
@code{no_insurance} and @code{always_insure} are both false. The player
should answer either @code{yes} (or @code{y}) or @code{no} (or
@code{n}).

@strong{Examples}

@verbatim
insurance?
@end verbatim

@node play? p d
@subsubsection @code{play?} @math{p} @math{d}
@anchor{#sec:play}
The dealer asks the user to play, i.e.@ to choose wether to

@itemize
@item
@code{pair} (or @code{p})
@item
@code{double} (or @code{d})
@item
@code{hit} (or @code{h})
@item
@code{stand} (or @code{s})
@end itemize

given that the value of the player's hand id @math{p} and that the value
of the dealer's hand is @math{d}, where @math{p} and @math{d} are
integers. If @math{p} is negative, the hand is soft with a value equal
to @math{|p|}.

@strong{Examples}

@verbatim
play? 17 10
play? 20 10
play? -17 3
play? -19 7
play? 16 10
play? -16 10
play? 16 5
play? 7 7
@end verbatim

@node Informative messages
@subsection Informative messages
@anchor{#sec:informative}
For basic players, all of the informative messages listed in this
section can be ignored. For advanced players, almost all of the messages
can be ignored.

@itemize
@item
@code{shuffling} (sec.@ 3.1.2.1)
@item
@code{new_hand} (sec.@ 3.1.2.2)
@item
@code{bet_negative} (sec.@ 3.1.2.3)
@item
@code{bet_maximum} (sec.@ 3.1.2.4)
@item
@code{bet_zero} (sec.@ 3.1.2.5)
@item
@code{card_player} (sec.@ 3.1.2.6)
@item
@code{card_dealer_up} (sec.@ 3.1.2.7)
@item
@code{card_dealer} (sec.@ 3.1.2.8)
@item
@code{card_dealer_hole} (sec.@ 3.1.2.9)
@item
@code{dealer_blackjack} (sec.@ 3.1.2.10)
@item
@code{player_wins_insurance} (sec.@ 3.1.2.11)
@item
@code{player_blackjack_also} (sec.@ 3.1.2.12)
@item
@code{player_split_invalid} (sec.@ 3.1.2.13)
@item
@code{player_split_ok} (sec.@ 3.1.2.14)
@item
@code{player_double_invalid} (sec.@ 3.1.2.15)
@end itemize

@menu
* shuffling::
* new_hand n b::
* bet_negative::
* bet_maximum::
* bet_zero::
* card_player rs::
* card_dealer_up rs::
* card_dealer rs::
* card_dealer_hole rs::
* dealer_blackjack::
* player_wins_insurance::
* player_blackjack_also::
* player_split_invalid::
* player_split_ok k::
* player_double_invalid::
@end menu

@node shuffling
@subsubsection @code{shuffling}
@anchor{#sec:shuffling}
The dealer informs that he is shuffling the decks. This only happens
when a non-zero value for the option @code{decks} is set. If
@code{decks = 0} (or the command-line option @code{-d0} is passed), then
cards are drawn randomnly from an infinite set of cards and there is no
need to shuffle.

@strong{Examples}

@verbatim
shuffling
@end verbatim

@node new_hand n b
@subsubsection @code{new_hand} @math{n} @math{b}
@anchor{#sec:new_hand}
The dealer states that a new hand is starting. The integer@ @math{n}
gives the number of the hand that is about to start (first hand is
@math{n=1}). The decimal number@ @math{b} states the player's bankroll
before placing the bet in the hand that is about to start. Even though
bets have to be integers, pay offs might be non-integer such as when
winning a natural (e.g.@ @math{3/2 = 1.5} or @math{6/5} = 1.2).

@strong{Examples}

@verbatim
new_hand 1 0
new_hand 22 -8
new_hand 24998 -7609.5
@end verbatim

@node bet_negative
@subsubsection @code{bet_negative}
@anchor{#sec:bet_negative}
The dealer complains that the bet the placer placed is invalid. Only
positive integer numbers are allowed. The player will receive a new
@code{bet?} message.

@strong{Examples}

@verbatim
bet_negative
@end verbatim

@node bet_maximum
@subsubsection @code{bet_maximum}
@anchor{#sec:bet_maximum}
The dealer complains that the bet the placer placed is invalid. The bet
is larger than the maximum wager allowed by @code{maximum_bet}. The
player will receive a new @code{bet?} message.

@strong{Examples}

@verbatim
bet_maximum
@end verbatim

@node bet_zero
@subsubsection @code{bet_zero}
@anchor{#sec:bet_zero}
The dealer complains that the bet the placer placed is invalid. Only
positive integer numbers are allowed. The player will receive a new
@code{bet?} message.

@strong{Examples}

@verbatim
bet_zero
@end verbatim

@node card_player rs
@subsubsection @code{card_player} @math{rs}
@anchor{#sec:card_player}
The dealer informs that the player has been dealt a card. The card is
given as a two-character ASCII representation where the first
character@ @math{r} indicates the rank and the second
character@ @math{s} gives the suit.

@multitable {Character} {Queen} 
@headitem 
Character
 @tab Rank
@item 
@code{A}
 @tab Ace
@item 
@code{2}
 @tab Deuce
@item 
@code{3}
 @tab Three
@item 
@code{4}
 @tab Four
@item 
@code{5}
 @tab Five
@item 
@code{6}
 @tab Six
@item 
@code{7}
 @tab Seven
@item 
@code{8}
 @tab Eight
@item 
@code{9}
 @tab Nine
@item 
@code{T}
 @tab Ten
@item 
@code{J}
 @tab Jack
@item 
@code{Q}
 @tab Queen
@item 
@code{J}
 @tab King
@end multitable

@multitable {Character} {♦ Diamonds} 
@headitem 
Character
 @tab Suit
@item 
@code{C}
 @tab ♣ Clubs
@item 
@code{D}
 @tab ♦ Diamonds
@item 
@code{H}
 @tab ♥ Hearts
@item 
@code{S}
 @tab ♠ Spades
@end multitable

@strong{Examples}

@verbatim
card_player 9C 
card_player JD 
card_player QC 
card_player KS 
card_player TD
card_player 6H 
@end verbatim

@node card_dealer_up rs
@subsubsection @code{card_dealer_up} @math{rs}
@anchor{#sec:card_dealer_up}
The dealer informs that the dealer has been dealt the up card (i.e. the
first card facing up). This message is issued only once per hand. The
card is given as the two-character ASCII representation discussed in
sec.@ 3.1.2.6.

@strong{Examples}

@verbatim
card_dealer_up KD
card_dealer_up 7H
card_dealer_up KH
card_dealer_up QD
card_dealer_up 6C
@end verbatim

@node card_dealer rs
@subsubsection @code{card_dealer} @math{rs}
@anchor{#sec:card_dealer}
The dealer informs that the dealer has been dealt a card. The card is
given as the two-character ASCII representation discussed in
sec.@ 3.1.2.6.

@strong{Examples}

@verbatim
card_dealer TH
card_dealer JC
card_dealer 5D
card_dealer 5H
card_dealer QH
@end verbatim

@node card_dealer_hole rs
@subsubsection @code{card_dealer_hole} @math{rs}
@anchor{#sec:card_dealer_hole}
The dealer informs what his hole card is. This message is issued only if
playing the american rules, i.e. with @code{enhc = false} or
@code{ahc = true}. The card is given as the two-character ASCII
representation discussed in sec.@ 3.1.2.6.

@strong{Examples}

@verbatim
card_dealer_hole KH
card_dealer_hole AC
card_dealer_hole 4H
card_dealer_hole 5D
card_dealer_hole 7H
@end verbatim

@node dealer_blackjack
@subsubsection @code{dealer_blackjack}
@anchor{#sec:dealer_blackjack}
The dealer informs that he has blackjack.

@strong{Examples}

@verbatim
dealer_blackjack
@end verbatim

@node player_wins_insurance
@subsubsection @code{player_wins_insurance}
@anchor{#sec:player_wins_insurance}
The dealer informs that the user won the insurance.

@strong{Examples}

@verbatim
player_wins_insurance
@end verbatim

@node player_blackjack_also
@subsubsection @code{player_blackjack_also}
@anchor{#sec:player_blackjack_also}
The dealer informs that both he and the user have blackjack.

@strong{Examples}

@verbatim
player_blackjack_also
@end verbatim

@node player_split_invalid
@subsubsection @code{player_split_invalid}
@anchor{#sec:player_split_invalid}
The dealer complains that the split request cannot be fulfilled.
Splitting is only possible when exactly two cards with the same rank
have been dealt in a hand. The player will receive a new @code{play?}
message.

@strong{Examples}

@verbatim
player_split_invalid
@end verbatim

@node player_split_ok k
@subsubsection @code{player_split_ok} @math{k}
@anchor{#sec:player_split_ok}
The dealer informs that the split request was successfully be fulfilled.
The integer @math{k} indicates the id of the split hand (the first hand
has an id equal to one so @math{k>1} when splitting).

@strong{Examples}

@verbatim
player_split_ok 2
player_split_ok 3
@end verbatim

@node player_double_invalid
@subsubsection @code{player_double_invalid}
@anchor{#sec:player_double_invalid}
The dealer complains that the doubling-down request cannot be fulfilled.
Doubling down is only possible when exactly two cards have been dealt in
a hand and the @code{doa} or @code{da9} option is met. The player will
receive a new @code{play?} message.

@strong{Examples}

@verbatim
player_double_invalid
@end verbatim

@node Commands from the player to the dealer
@section Commands from the player to the dealer
@anchor{#sec:p2d}
TBD

The following commands are available for the player for playing her
hand.

The following are general commands in the sense that they can be sent
from the player to the dealer at any moment of the game.

@node Configuration
@chapter Configuration
@anchor{#sec:configuration}
Libre@ Blackjacks reads a configuration file that contains

@itemize
@item
settings about the rules of the game
@itemize
@item
number of decks,
@item
whether if the dealer has to hit soft seventeen or not,
@item
blackjack payout,
@item
maximum bet allowed,
@item
etc@dots{}
@end itemize

@item
how the player is supposed to play
@itemize
@item
number of hands
@item
whether a flat or variable bet is going to be used,
@item
etc@dots{}
@end itemize

@item
if there are any particular shoe arrangement, i.e.@ a predefined set of
cards dealt in a certain order for instance to play one million hands of
a sixteen against a dealer's ten
@item
what kind of information is shown in the interactive session
@itemize
@item
if ASCII-art cards are supposed to be shown,
@item
a real-time delay to make the game smoother,
@item
etc.
@end itemize

@item
how the automated player communicates with the dealer
@itemize
@item
using standard input/output,
@item
FIFO named pipes,
@item
POSIX message queues,
@item
POSIX shared memory,
@item
etc@dots{}
@end itemize

@end itemize

The location of the configuration file can be given in the command line.
If none is provided, a file named @code{blackjack.conf} in the current
directory is used. If such file does not exists, the defaults values of
each variable are used.

@quotation
It is thus recommended to run each monte-carlo simulation that needs a
particular configuration---and possibly other files such as card
arrangements, strategies and/or results---in a different directory
(a.k.a. folder) with a @code{blackjack.conf} file in it.
@end quotation
Individual variables can be set from the command line by passing one or
more times the option @code{--configuration_variable[=value]} as
explained in [@@sec-invocation].

Comments can be inserted using either a hash @code{#} or a colon
@code{;} at any position in the line. The following configuration file
is the default provided in the main distribution tarball:

@verbatim
# uncomment the following line to arrange cards
# arranged_cards = AC 5H 8S 9D KH

flat_bet = true       # do not ask for bets
no_insurance = true   # do not ask for insurance
decks = 1             # number of decks, negative means infinite
@end verbatim

@menu
* Reference::
@end menu

@node Reference
@section Reference
@anchor{#reference}
@itemize
@item
@code{dealer} (sec.@ 4.1.0.1)
@item
@code{player} (sec.@ 4.1.0.2)
@item
@code{max_incorrect_commands} (sec.@ 4.1.0.3)
@end itemize

@node dealer = game
@subsubsection @code{dealer =} @emph{game}
@anchor{#sec:dealer}
Defines the game the dealer will deal. Currently, the only valid choice
is @code{blackjack}.

@strong{Default}: blackjack

@strong{Examples}

@verbatim
dealer = blackjack
@end verbatim

@node player = player
@subsubsection @code{player =} @emph{player}
@anchor{#sec:player}
Defines which player will be playing against the dealer. Currently, the
only valid choices are

@itemize
@item
@code{tty}: the game starts in an interactive mode where the dealer's
messages and dealt cards are printed in the terminal, and the user is
asked to issue her commands through the keyboard. This player is usually
used to test if the configuration settings (i.e.@ @code{enhc} or
@code{cards_file}) work as expected, although it can be used to just
play ASCII blackjack.
@item
@code{stdio}: the dealer writes messages into the standard output and
reads back commands from the standard input. With proper redirection
(and possibly FIFO devices), this option can be used to have an ad-hoc
player to programatically play blackjack. See [@@sec-players] for
examples.
@item
@code{internal}: the dealer plays against an internal player already
programmed in Libre@ Blackjack that bets flat, never takes insurance and
follows the basic strategy. The strategy can be changed by setting the
configuration variable @code{strategy_file}. This player is chosen if
@code{-i} is passed in the command line.
@end itemize

@strong{Default}: If neither the standard input nor output of the
executable @code{blackjack} is re-directed, the default is @code{tty}.
If at least one of them is re-directed or piped, the default is
@code{stdio}.

@strong{Examples}

@verbatim
player = tty
player = stdio
player = internal
@end verbatim

@node max_incorrect_commands = n
@subsubsection @code{max_incorrect_commands =} @math{n}
@anchor{#sec:max_incorrect_commands}
Tells the dealer how many consecutive incorrect or invalid commands to
accept before quitting. A finite value of @math{n} avoids infinite loops
where the player sends commands that do not make sense (such as garbage)
or that are not valid (such as doubling when not allowed).

@strong{Default}: 10

@strong{Examples}

@verbatim
max_incorrect_commands = 20
@end verbatim

@node Internal players
@chapter Internal players
@anchor{#internal-players}
TBD

@node Examples
@chapter Examples
@anchor{#examples}
The directory @code{players} contains a few examples of automated
players, which are discussed in the following sections.

@node Communication mechanisms
@chapter Communication mechanisms
@anchor{#sec:communication}

@menu
* Standard input & output::
* FIFOs::
* Message queues::
@end menu

@node Standard input & output
@section Standard input & output
@anchor{#standard-input-output}

@node FIFOs
@section FIFOs
@anchor{#fifos}

@node Message queues
@section Message queues
@anchor{#message-queues}

@node Tests
@chapter Tests
@anchor{#tests}

@node Statistical utilities
@chapter Statistical utilities
@anchor{#statistical-utilities}

@node Installation
@chapter Installation
@anchor{#installation}

@menu
* From binaries::
* From sources::
@end menu

@node From binaries
@section From binaries
@anchor{#from-binaries}

@node From sources
@section From sources
@anchor{#from-sources}

@menu
* Tarball::
* Git repository::
@end menu

@node Tarball
@subsection Tarball
@anchor{#tarball}

@node Git repository
@subsection Git repository
@anchor{#git-repository}

@bye
